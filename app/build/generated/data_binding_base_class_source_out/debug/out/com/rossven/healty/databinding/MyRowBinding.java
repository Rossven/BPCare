// Generated by view binder compiler. Do not edit!
package com.rossven.healty.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.rossven.healty.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MyRowBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView infDate;

  @NonNull
  public final TextView infDia;

  @NonNull
  public final TextView infId;

  @NonNull
  public final TextView infSys;

  @NonNull
  public final TextView textView10;

  @NonNull
  public final TextView textView9;

  private MyRowBinding(@NonNull LinearLayout rootView, @NonNull TextView infDate,
      @NonNull TextView infDia, @NonNull TextView infId, @NonNull TextView infSys,
      @NonNull TextView textView10, @NonNull TextView textView9) {
    this.rootView = rootView;
    this.infDate = infDate;
    this.infDia = infDia;
    this.infId = infId;
    this.infSys = infSys;
    this.textView10 = textView10;
    this.textView9 = textView9;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MyRowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MyRowBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.my_row, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MyRowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.inf_date;
      TextView infDate = ViewBindings.findChildViewById(rootView, id);
      if (infDate == null) {
        break missingId;
      }

      id = R.id.inf_dia;
      TextView infDia = ViewBindings.findChildViewById(rootView, id);
      if (infDia == null) {
        break missingId;
      }

      id = R.id.inf_id;
      TextView infId = ViewBindings.findChildViewById(rootView, id);
      if (infId == null) {
        break missingId;
      }

      id = R.id.inf_sys;
      TextView infSys = ViewBindings.findChildViewById(rootView, id);
      if (infSys == null) {
        break missingId;
      }

      id = R.id.textView10;
      TextView textView10 = ViewBindings.findChildViewById(rootView, id);
      if (textView10 == null) {
        break missingId;
      }

      id = R.id.textView9;
      TextView textView9 = ViewBindings.findChildViewById(rootView, id);
      if (textView9 == null) {
        break missingId;
      }

      return new MyRowBinding((LinearLayout) rootView, infDate, infDia, infId, infSys, textView10,
          textView9);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
